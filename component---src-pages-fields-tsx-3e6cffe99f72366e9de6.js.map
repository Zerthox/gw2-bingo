{"version":3,"file":"component---src-pages-fields-tsx-3e6cffe99f72366e9de6.js","mappings":"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","sources":["webpack://gw2-bingo/./src/hooks/fields.ts","webpack://gw2-bingo/./src/hooks/fractals.ts","webpack://gw2-bingo/./src/data/index.ts","webpack://gw2-bingo/./src/hooks/dailies.ts","webpack://gw2-bingo/./src/pages/fields.tsx"],"sourcesContent":["import {useStaticQuery, graphql} from \"gatsby\";\nimport {Fractal} from \"./fractals\";\nimport {Item} from \"../components/elements\";\n\nexport const enum Mode {\n    Normal = \"Normal\",\n    CM = \"CM\",\n    Both = \"Both\"\n}\n\nexport interface Field {\n    fractal: string;\n    mode?: Mode;\n    encounter?: string;\n    event: string;\n}\n\ninterface FieldData {\n    allFieldsJson: {\n        totalCount: number;\n        nodes: Field[];\n    }\n}\n\nconst useFieldData = () => useStaticQuery<FieldData>(graphql`\n    query {\n        allFieldsJson {\n            totalCount\n            nodes {\n                fractal\n                mode\n                encounter\n                event\n            }\n        }\n    }\n`);\n\nexport const useFields = (): Field[] => useFieldData().allFieldsJson.nodes;\n\nexport const useFieldCount = (): number => useFieldData().allFieldsJson.totalCount;\n\n/** Generates a set of random field IDs */\nexport const randomFields = (all: Field[], whitelist: Field[]): number[] => {\n    if (whitelist.length < 9) {\n        return [];\n    } else {\n        const result: number[] = [];\n        while (result.length < 9) {\n            const generated = whitelist[Math.floor(Math.random() * whitelist.length)];\n            const id = all.indexOf(generated);\n            if (!result.includes(id)) {\n                result.push(id);\n            }\n        }\n        return result;\n    }\n};\n\n/** Converts field data to an item. */\nexport const toItem = (fractals: Fractal[], {fractal, mode, encounter, event}: Field): Item => {\n    const found = fractals.find(({name}) => name === fractal);\n    const display = mode === Mode.CM\n        ? `${found ? found.displayCM ?? found.name : fractal} CM`\n        : found ? found.display ?? found.name : fractal;\n    return {\n        title: encounter ? `${display} - ${encounter}` : display,\n        content: event\n    };\n};\n","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport interface Fractal {\n    id: number;\n    name: string;\n    display?: string;\n    hasCM: boolean;\n    displayCM?: string;\n    scales: number[];\n}\n\ninterface FractalData {\n    allFractalsJson: {\n        nodes: (Omit<Fractal, \"id\"> & {jsonId: number})[];\n    }\n}\n\nconst useFractalData = () => useStaticQuery<FractalData>(graphql`\n    query {\n        allFractalsJson {\n            nodes {\n                jsonId\n                name\n                display\n                hasCM\n                displayCM\n                scales\n            }\n        }\n    }\n`);\n\nexport const useFractalsWithLobby = (): Fractal[] => useFractalData().allFractalsJson.nodes.map(({jsonId, ...rest}) => ({id: jsonId, ...rest}));\n\nexport const useFractals = (): Fractal[] => useFractalsWithLobby().slice(1);\n\nexport const scaleToTier = (scale: number): number => {\n    if (scale <= 0 || scale >= 100) {\n        return 0;\n    } else if (scale <= 25) {\n        return 1;\n    } else if (scale <= 50) {\n        return 2;\n    } else if (scale <= 75) {\n        return 3;\n    } else {\n        return 4;\n    }\n};\n","/** Date when last updated. */\nexport const DATE: number = Date.UTC(2022, 1, 28); // end of dragons release\n\n/** Offset in the daily rotation. */\nexport const OFFSET = 14;\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {DATE, OFFSET} from \"../data\";\n\ninterface DailyEntry {\n    _0: number;\n    _1: number;\n    _2: number;\n}\n\ninterface DailyData {\n    allDailiesJson: {\n        nodes: DailyEntry[];\n    }\n    allRecsJson: {\n        nodes: DailyEntry[];\n    }\n}\n\nconst useDailyData = () => useStaticQuery<DailyData>(graphql`\n    query {\n        allDailiesJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n        allRecsJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n    }\n`);\n\nexport const useDailies = (): number[][] => useDailyData().allDailiesJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\nexport const useRecs = (): number[][] => useDailyData().allRecsJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\n/** One day in milliseconds. */\nconst DAY = 24 * 60 * 60 * 1000;\n\n/** Returns the index in the daily rotation for a given date. */\nconst indexFor = (date: Date) => {\n    // calculate time passed since last update\n    const passed = date.getTime() - DATE;\n\n    // index is days passed\n    return (Math.floor(passed / DAY) + OFFSET) % 15;\n};\n\n/** Returns the fractal daily ids for a given date. */\nexport const useDailiesFor = (date: Date): number[] => useDailies()[indexFor(date)];\n\n/** Returns the fractal rec scales for a given date. */\nexport const useRecsFor = (date: Date): number[] => useRecs()[indexFor(date)];\n\n/** Returns todays fractal daily ids. */\nexport const useTodaysDailies = (): number[] => useDailiesFor(new Date());\n\n/** Returns todays fractal rec scales. */\nexport const useTodaysRecs = (): number[] => useRecsFor(new Date());\n","import React from \"react\";\nimport {Layout} from \"../components/layout\";\nimport {Paragraph, List} from \"../components/elements\";\nimport {useFields, toItem, Field, useFractals, Mode} from \"../hooks\";\n\nconst cms = [\n    \"All\",\n    \"Old\",\n    \"Nightmare\",\n    \"Shattered Observatory\",\n    \"Sunqua Peak\"\n];\n\nconst encounters = [\n    \"MAMA\",\n    \"Bullet Hell\",\n    \"Siax\",\n    \"Ensolyss\",\n    \"Skorvald\",\n    \"Artsariiv\",\n    \"Arkk\",\n    \"Ai\",\n    \"Elemental Ai\",\n    \"Dark Ai\"\n];\n\nconst scale = ({fractal, mode}: Field) => {\n    if (mode === Mode.CM) {\n        // cms at end\n        return 2 + cms.indexOf(fractal);\n    } else if (fractal === \"All\") {\n        // all to front\n        return -2;\n    } else if (fractal === \"Dailies\") {\n        // dailies after\n        return -1;\n    } else {\n        // normal for regular\n        return 0;\n    }\n};\n\nconst compare = (a: Field, b: Field) => {\n    const scaleA = scale(a);\n    const scaleB = scale(b);\n\n    // order of encounters within the CM fractals\n    const encounterA = a.encounter ? encounters.indexOf(a.encounter) : -2;\n    const encounterB = b.encounter ? encounters.indexOf(b.encounter) : -2;\n\n    // sort by scale\n    if (scaleA < scaleB) {\n        return -1;\n    } else if (scaleA > scaleB) {\n        return 1;\n    } else if (a.mode === Mode.CM) {\n        // sort cms by encounter\n        if (encounterA < encounterB) {\n            return -1;\n        } else if (encounterA > encounterB) {\n            return 1;\n        }\n    }\n\n    return a.fractal.localeCompare(b.fractal);\n};\n\nconst Fields = (): JSX.Element => {\n    const fractals = useFractals();\n    const fields = useFields();\n\n    return (\n        <Layout title=\"Bingo Fields\">\n            <Paragraph align=\"center\">\n                Total count: {fields.length} bingo fields\n            </Paragraph>\n            <List>\n                {[...fields].sort(compare).map((field) => toItem(fractals, field))}\n            </List>\n        </Layout>\n    );\n};\n\nexport default Fields;\n"],"names":["Mode","useFractalsWithLobby","useStaticQuery","allFractalsJson","nodes","map","jsonId","rest","id","useFractals","slice","scaleToTier","scale","DATE","Date","UTC","useDailyData","indexFor","date","passed","getTime","Math","floor","useDailiesFor","allDailiesJson","_0","_1","_2","useRecsFor","allRecsJson","useTodaysDailies","useTodaysRecs","useFieldData","useFields","allFieldsJson","useFieldCount","totalCount","randomFields","all","whitelist","length","result","generated","random","indexOf","includes","push","toItem","fractals","fractal","mode","encounter","event","found","find","name","display","CM","displayCM","title","content","cms","encounters","compare","a","b","scaleA","scaleB","encounterA","encounterB","localeCompare","fields","align","sort","field"],"sourceRoot":""}