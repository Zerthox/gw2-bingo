{"version":3,"file":"component---src-pages-index-tsx-86d654c1b68c1f565914.js","mappings":"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","sources":["webpack://gw2-bingo/./src/convert/v1.ts","webpack://gw2-bingo/./src/hooks/fractals.ts","webpack://gw2-bingo/./src/data/index.ts","webpack://gw2-bingo/./src/hooks/dailies.ts","webpack://gw2-bingo/./src/hooks/fields.ts","webpack://gw2-bingo/./src/pages/index.tsx"],"sourcesContent":["/** Helper for conversion. */\nconst converter = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n\n/** Encodes IDs as a 12 character base64 string. */\nexport const encode = (ids: number[]): string => {\n    // check ids length\n    if (ids.length !== 9) {\n        return \"\";\n    }\n\n    // convert into 4x 2-bit numbers\n    const numbers: number[] = [];\n    for (const id of ids) {\n        numbers.push(id & 3);\n        numbers.push((id >> 2) & 3);\n        numbers.push((id >> 4) & 3);\n        numbers.push((id >> 6) & 3);\n    }\n\n    // group numbers to base64 code\n    let code = \"\";\n    for (let i = 0; i < numbers.length; i += 3) {\n        code += converter.charAt(numbers[i] + (numbers[i + 1] << 2) + (numbers[i + 2] << 4));\n    }\n    return code;\n};\n\n/** Decodes IDs from a 12 character base64 string. */\nexport const decode = (code: string): number[] => {\n    // check code length\n    if (code.length !== 12) {\n        return [];\n    }\n\n    // decode numbers\n    const numbers: number[] = [];\n    for (const char of code.split(\"\")) {\n        // convert it to 6-bit number\n        const code = converter.indexOf(char);\n\n        // check code\n        if (code === -1) {\n            return [];\n        }\n\n        // split into 3x 2-bit numbers\n        numbers.push(code & 3);\n        numbers.push((code >> 2) & 3);\n        numbers.push((code >> 4) & 3);\n    }\n\n    // group numbers to bytes\n    const ids: number[] = [];\n    for (let i = 0; i < numbers.length; i += 4) {\n        ids.push(numbers[i] + (numbers[i + 1] << 2) + (numbers[i + 2] << 4) + (numbers [i + 3] << 6));\n    }\n    return ids;\n};\n","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport interface Fractal {\n    id: number;\n    name: string;\n    display?: string;\n    hasCM: boolean;\n    displayCM?: string;\n    scales: number[];\n}\n\ninterface FractalData {\n    allFractalsJson: {\n        nodes: (Omit<Fractal, \"id\"> & {jsonId: number})[];\n    }\n}\n\nconst useFractalData = () => useStaticQuery<FractalData>(graphql`\n    query {\n        allFractalsJson {\n            nodes {\n                jsonId\n                name\n                display\n                hasCM\n                displayCM\n                scales\n            }\n        }\n    }\n`);\n\nexport const useFractalsWithLobby = (): Fractal[] => useFractalData().allFractalsJson.nodes.map(({jsonId, ...rest}) => ({id: jsonId, ...rest}));\n\nexport const useFractals = (): Fractal[] => useFractalsWithLobby().slice(1);\n\nexport const scaleToTier = (scale: number): number => {\n    if (scale <= 0 || scale >= 100) {\n        return 0;\n    } else if (scale <= 25) {\n        return 1;\n    } else if (scale <= 50) {\n        return 2;\n    } else if (scale <= 75) {\n        return 3;\n    } else {\n        return 4;\n    }\n};\n","/** Date when last updated. */\nexport const DATE: number = Date.UTC(2022, 1, 28); // end of dragons release\n\n/** Offset in the daily rotation. */\nexport const OFFSET = 3;\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {DATE, OFFSET} from \"../data\";\n\ninterface DailyEntry {\n    _0: number;\n    _1: number;\n    _2: number;\n}\n\ninterface DailyData {\n    allDailiesJson: {\n        nodes: DailyEntry[];\n    }\n    allRecsJson: {\n        nodes: DailyEntry[];\n    }\n}\n\nconst useDailyData = () => useStaticQuery<DailyData>(graphql`\n    query {\n        allDailiesJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n        allRecsJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n    }\n`);\n\nexport const useDailies = (): number[][] => useDailyData().allDailiesJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\nexport const useRecs = (): number[][] => useDailyData().allRecsJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\n/** One day in milliseconds. */\nconst DAY = 24 * 60 * 60 * 1000;\n\n/** Returns the index in the daily rotation for a given date. */\nconst indexFor = (date: Date) => {\n    // calculate time passed since last update\n    const passed = date.getTime() - DATE;\n\n    // index is days passed\n    return (Math.floor(passed / DAY) + OFFSET) % 15;\n};\n\n/** Returns the fractal daily ids for a given date. */\nexport const useDailiesFor = (date: Date): number[] => useDailies()[indexFor(date)];\n\n/** Returns the fractal rec scales for a given date. */\nexport const useRecsFor = (date: Date): number[] => useRecs()[indexFor(date)];\n\n/** Returns todays fractal daily ids. */\nexport const useTodaysDailies = (): number[] => useDailiesFor(new Date());\n\n/** Returns todays fractal rec scales. */\nexport const useTodaysRecs = (): number[] => useRecsFor(new Date());\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {Fractal} from \"./fractals\";\nimport {Item} from \"../components/elements\";\n\nexport const enum Mode {\n    Normal = \"Normal\",\n    CM = \"CM\",\n    Both = \"Both\"\n}\n\nexport interface Field {\n    fractal: string;\n    mode?: Mode;\n    encounter?: string;\n    event: string;\n}\n\ninterface FieldData {\n    allFieldsJson: {\n        totalCount: number;\n        nodes: Field[];\n    }\n}\n\nconst useFieldData = () => useStaticQuery<FieldData>(graphql`\n    query {\n        allFieldsJson {\n            totalCount\n            nodes {\n                fractal\n                mode\n                encounter\n                event\n            }\n        }\n    }\n`);\n\nexport const useFields = (): Field[] => useFieldData().allFieldsJson.nodes;\n\nexport const useFieldCount = (): number => useFieldData().allFieldsJson.totalCount;\n\n/** Generates a set of random field IDs */\nexport const randomFields = (all: Field[], whitelist: Field[]): number[] => {\n    if (whitelist.length < 9) {\n        return [];\n    } else {\n        const result: number[] = [];\n        while (result.length < 9) {\n            const generated = whitelist[Math.floor(Math.random() * whitelist.length)];\n            const id = all.indexOf(generated);\n            if (!result.includes(id)) {\n                result.push(id);\n            }\n        }\n        return result;\n    }\n};\n\n/** Converts field data to an item. */\nexport const toItem = (fractals: Fractal[], {fractal, mode, encounter, event}: Field): Item => {\n    const found = fractals.find(({name}) => name === fractal);\n    const display = mode === Mode.CM\n        ? `${found ? found.displayCM ?? found.name : fractal} CM`\n        : found ? found.display ?? found.name : fractal;\n    return {\n        title: encounter ? `${display} - ${encounter}` : display,\n        content: event\n    };\n};\n","import React, {useState, useMemo} from \"react\";\nimport {Layout, Flex, Grid, spacing} from \"../components/layout\";\nimport {Link, Paragraph, Checkbox, LinkButton} from \"../components/elements\";\nimport {encode} from \"../convert/v1\";\nimport {useFractals, useTodaysDailies, useTodaysRecs, scaleToTier, useFields, randomFields, Field, Mode} from \"../hooks\";\n\ninterface Box {\n    display: string;\n    fractal: string;\n    hasCM: boolean;\n    isCM: boolean;\n    isDaily: boolean;\n    rec: number;\n}\n\nconst toFields = (fields: Field[], boxes: Box[], checked: boolean[]): Field[] => {\n    const hasDailies = boxes.some(({isCM}, i) => checked[i] && !isCM);\n    const hasCMs = boxes.some(({isCM}, i) => checked[i] && isCM);\n\n    return fields.filter(({fractal, mode}) => {\n        switch (fractal) {\n            case \"All\":\n                return mode === Mode.CM ? hasCMs : true;\n            case \"Dailies\":\n                return hasDailies;\n            default:\n                return boxes.some((box, i) => (\n                    checked[i]\n                    && box.fractal === fractal\n                    && (\n                        mode === Mode.Both\n                        || mode === Mode.CM && box.isCM\n                        || (!mode || mode === Mode.Normal) && !box.isCM\n                    )\n                ));\n        }\n    });\n};\n\nconst Index = (): JSX.Element => {\n    // data\n    const fractals = useFractals();\n    const dailies = useTodaysDailies();\n    const recs = useTodaysRecs();\n    const fields = useFields();\n\n    // checkboxes\n    const boxes = useMemo<Box[]>(() => [\n        ...fractals\n            .map(({id, name, display, scales, hasCM}) => ({\n                fractal: name,\n                display: display ?? name,\n                isCM: false,\n                hasCM,\n                isDaily: dailies.includes(id),\n                rec: scaleToTier(scales.find((scale) => recs.includes(scale)) ?? 0)\n            }))\n            .sort((a, b) => a.display.localeCompare(b.display)),\n        ...fractals\n            .filter(({hasCM}) => hasCM)\n            .map(({id, name, displayCM}) => ({\n                fractal: name,\n                display: `${displayCM ?? name} CM`,\n                hasCM: true,\n                isCM: true,\n                isDaily: dailies.includes(id),\n                rec: 0\n            }))\n    ], [fractals, dailies, recs]);\n\n    // checkbox state\n    const [checked, setChecked] = useState(() => boxes.map(({hasCM, isCM, isDaily}) => isCM || (!hasCM && isDaily)));\n\n    // random field ids\n    const genRand = () => encode(randomFields(fields, toFields(fields, boxes, checked)));\n    const [rand, setRand] = useState(genRand);\n\n    return (\n        <Layout isHome={true}>\n            <Paragraph align=\"center\"><i>Such fun! It&apos;s fantastic, isn&apos;t it?</i> ~Viirastra</Paragraph>\n            <LinkButton\n                to={`/v1/card?${rand}`}\n                className={spacing.bottom20}\n                onMouseDown={() => setRand(genRand())}\n            >Generate Bingo</LinkButton>\n            <Grid className={spacing.bottom20}>\n                {boxes.map(({display, isDaily, rec}, i) => (\n                    <Checkbox\n                        key={i}\n                        checked={checked[i]}\n                        onChange={(value) => {\n                            checked[i] = value;\n                            setChecked([...checked]);\n                            setRand(genRand());\n                        }}\n                    >\n                        <Flex direction=\"row\" align=\"center\">\n                            <span>{display}</span>\n                            {isDaily ? (\n                                <code className={spacing.left5}> [D]</code>\n                            ) : null}\n                            {rec > 0 ? (\n                                <code className={spacing.left5}> [R{rec}]</code>\n                            ) : null}\n                        </Flex>\n                    </Checkbox>\n                ))}\n            </Grid>\n            <Paragraph>This page allows you to generate a bingo card for your Fractal runs.</Paragraph>\n            <Paragraph>First time here? See <Link to=\"/how-to\">How to play</Link>.</Paragraph>\n            <Paragraph>\n                Currently we feature a total of {fields.length} different bingo fields!\n                You can see all of them <Link to=\"/fields\">here</Link>.\n            </Paragraph>\n            <Paragraph>\n                Got good ideas?\n                Check the <Link to=\"https://github.com/Zerthox/gw2-bingo\">GitHub Repo</Link>.\n            </Paragraph>\n        </Layout>\n    );\n};\n\nexport default Index;\n"],"names":["converter","encode","ids","length","numbers","id","push","code","i","charAt","decode","char","split","indexOf","useFractalsWithLobby","useStaticQuery","allFractalsJson","nodes","map","_ref","jsonId","rest","useFractals","slice","scaleToTier","scale","DATE","Date","UTC","useDailyData","indexFor","date","passed","getTime","Math","floor","useDailiesFor","allDailiesJson","_0","_1","_2","useRecsFor","allRecsJson","_ref2","useTodaysDailies","useTodaysRecs","Mode","useFieldData","useFields","allFieldsJson","useFieldCount","totalCount","randomFields","all","whitelist","result","generated","random","includes","toItem","fractals","_found$displayCM","_found$display","fractal","mode","encounter","event","found","find","name","display","CM","displayCM","title","content","Index","dailies","recs","fields","boxes","useMemo","concat","_toConsumableArray","_ref4","_scales$find","scales","hasCM","isCM","isDaily","rec","sort","a","b","localeCompare","filter","_ref5","_ref6","checked","setChecked","useState","_ref7","genRand","toFields","hasDailies","some","hasCMs","_ref3","box","Both","Normal","rand","setRand","React","Layout","isHome","Paragraph","align","LinkButton","to","className","spacing","onMouseDown","Grid","_ref8","Checkbox","key","onChange","value","Flex","direction","Link"],"sourceRoot":""}