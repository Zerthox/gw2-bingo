{"version":3,"file":"component---src-pages-index-tsx-5a0a3e385a32adc1d63e.js","mappings":"q+BACA,IAAMA,EAAY,mEAGLC,EAAS,SAACC,GAEnB,GAAmB,IAAfA,EAAIC,OACJ,MAAO,GAKX,IADA,IACA,EADMC,EAAoB,GAC1B,IAAiBF,KAAjB,aAAsB,KAAXG,EAAW,QAClBD,EAAQE,KAAU,EAALD,GACbD,EAAQE,KAAMD,GAAM,EAAK,GACzBD,EAAQE,KAAMD,GAAM,EAAK,GACzBD,EAAQE,KAAMD,GAAM,EAAK,GAK7B,IADA,IAAIE,EAAO,GACFC,EAAI,EAAGA,EAAIJ,EAAQD,OAAQK,GAAK,EACrCD,GAAQP,EAAUS,OAAOL,EAAQI,IAAMJ,EAAQI,EAAI,IAAM,IAAMJ,EAAQI,EAAI,IAAM,IAErF,OAAOD,GAIEG,EAAS,SAACH,GAEnB,GAAoB,KAAhBA,EAAKJ,OACL,MAAO,GAKX,IADA,IACA,EADMC,EAAoB,GAC1B,IAAmBG,EAAKI,MAAM,OAA9B,aAAmC,KAAxBC,EAAwB,QAEzBL,EAAOP,EAAUa,QAAQD,GAG/B,IAAc,IAAVL,EACA,MAAO,GAIXH,EAAQE,KAAY,EAAPC,GACbH,EAAQE,KAAMC,GAAQ,EAAK,GAC3BH,EAAQE,KAAMC,GAAQ,EAAK,GAK/B,IADA,IAAML,EAAgB,GACbM,EAAI,EAAGA,EAAIJ,EAAQD,OAAQK,GAAK,EACrCN,EAAII,KAAKF,EAAQI,IAAMJ,EAAQI,EAAI,IAAM,IAAMJ,EAAQI,EAAI,IAAM,IAAMJ,EAASI,EAAI,IAAM,IAE9F,OAAON,I,yPCpDOY,E,iCC4BLC,EAAuB,kBAfPC,EAAAA,EAAAA,gBAAc,YAe2BC,gBAAgBC,MAAMC,KAAI,gBAAEC,EAAF,EAAEA,OAAWC,GAAb,kCAAyBhB,GAAIe,GAAWC,OAE3HC,EAAc,kBAAiBP,IAAuBQ,MAAM,IAE5DC,EAAc,SAACC,GACxB,OAAIA,GAAS,GAAKA,GAAS,IAChB,EACAA,GAAS,GACT,EACAA,GAAS,GACT,EACAA,GAAS,GACT,EAEA,GC7CFC,EAAeC,KAAKC,IAAI,KAAM,EAAG,ICiBxCC,EAAe,kBAAMb,EAAAA,EAAAA,gBAAc,eA2BnCc,EAAW,SAACC,GAEd,IAAMC,EAASD,EAAKE,UAAYP,EAGhC,OAAQQ,KAAKC,MAAMH,EARX,ODtCU,IC8C2B,IAIpCI,EAAgB,SAACL,GAAD,OAjBeF,IAAeQ,eAAenB,MAAMC,KAAI,kBAAkB,CAAlB,EAAEmB,GAAF,EAAMC,GAAN,EAAUC,OAiB1BV,EAASC,KAGhEU,EAAa,SAACV,GAAD,OAlBeF,IAAea,YAAYxB,MAAMC,KAAI,kBAAkB,CAAlB,EAAEmB,GAAF,EAAMC,GAAN,EAAUC,OAkB1BV,EAASC,KAG1DY,EAAmB,kBAAgBP,EAAc,IAAIT,OAGrDiB,EAAgB,kBAAgBH,EAAW,IAAId,Q,SH3D1Cb,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,KAAAA,O,CAAAA,IAAAA,EAAAA,KAoBlB,IAAM+B,EAAe,kBAAM7B,EAAAA,EAAAA,gBAAc,eAc5B8B,EAAY,kBAAeD,IAAeE,cAAc7B,OAExD8B,EAAgB,kBAAcH,IAAeE,cAAcE,YAG3DC,EAAe,SAACC,EAAcC,GACvC,GAAIA,EAAUjD,OAAS,EACnB,MAAO,GAGP,IADA,IAAMkD,EAAmB,GAClBA,EAAOlD,OAAS,GAAG,CACtB,IAAMmD,EAAYF,EAAUlB,KAAKC,MAAMD,KAAKqB,SAAWH,EAAUjD,SAC3DE,EAAK8C,EAAItC,QAAQyC,GAClBD,EAAOG,SAASnD,IACjBgD,EAAO/C,KAAKD,GAGpB,OAAOgD,GAKFI,EAAS,SAACC,EAAD,GAAyE,QAAlDC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,MAC7DC,EAAQL,EAASM,MAAK,qBAAEC,OAAmBN,KAC3CO,EAAUN,IAAS9C,EAAKqD,IACrBJ,EAAK,UAAGA,EAAMK,iBAAT,QAAsBL,EAAME,KAAON,GADjC,MAEVI,EAAK,UAAGA,EAAMG,eAAT,QAAoBH,EAAME,KAAON,EAC5C,MAAO,CACHU,MAAOR,EAAeK,EAAN,MAAmBL,EAAcK,EACjDI,QAASR,K,4FIuDjB,UAnFc,WAEV,IAAMJ,GAAWpC,EAAAA,EAAAA,MACXiD,GAAU5B,EAAAA,EAAAA,MACV6B,GAAO5B,EAAAA,EAAAA,MACP6B,GAAS3B,EAAAA,EAAAA,MAGT4B,GAAQC,EAAAA,EAAAA,UAAe,mCACtBjB,EACEvC,KAAI,kBAAEd,EAAF,EAAEA,GAAI4D,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,QAASU,EAArB,EAAqBA,OAArB,MAAyC,CAC1CjB,QAASM,EACTC,QAASA,MAAAA,EAAAA,EAAWD,EACpBY,MAAM,EACNC,MAJC,EAA6BA,MAK9BC,QAASR,EAAQf,SAASnD,GAC1B2E,KAAKxD,EAAAA,EAAAA,IAAW,UAACoD,EAAOZ,MAAK,SAACvC,GAAD,OAAW+C,EAAKhB,SAAS/B,aAAtC,QAAiD,OAEpEwD,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEhB,QAAQkB,cAAcD,EAAEjB,cAVrB,OAWtBR,EACE2B,QAAO,qBAAEP,SACT3D,KAAI,gBAAEd,EAAF,EAAEA,GAAI4D,EAAN,EAAMA,KAAMG,EAAZ,EAAYA,UAAZ,MAA4B,CAC7BT,QAASM,EACTC,SAAYE,MAAAA,EAAAA,EAAaH,GAAlB,MACPa,OAAO,EACPD,MAAM,EACNE,QAASR,EAAQf,SAASnD,GAC1B2E,IAAK,UAEd,CAACtB,EAAUa,EAASC,IAGvB,GAA8Bc,EAAAA,EAAAA,WAAS,kBAAMZ,EAAMvD,KAAI,gBAAE2D,EAAF,EAAEA,MAAOD,EAAT,EAASA,KAAME,EAAf,EAAeA,QAAf,OAA4BF,IAAUC,GAASC,QAA/FQ,EAAP,KAAgBC,EAAhB,KAGMC,EAAU,kBAAMxF,EAAAA,EAAAA,IAAOiD,EAAAA,EAAAA,IAAauB,EA3D7B,SAACA,EAAiBC,EAAca,GAC7C,IAAMG,EAAahB,EAAMiB,MAAK,WAASnF,GAAT,IAAEqE,EAAF,EAAEA,KAAF,OAAeU,EAAQ/E,KAAOqE,KACtDe,EAASlB,EAAMiB,MAAK,WAASnF,GAAT,IAAEqE,EAAF,EAAEA,KAAF,OAAeU,EAAQ/E,IAAMqE,KAEvD,OAAOJ,EAAOY,QAAO,YAAqB,IAAnB1B,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KAC5B,OAAQD,GACJ,IAAK,MACD,OAAOC,IAAS9C,EAAAA,GAAAA,IAAU8E,EAC9B,IAAK,UACD,OAAOF,EACX,QACI,OAAOhB,EAAMiB,MAAK,SAACE,EAAKrF,GAAN,OACd+E,EAAQ/E,IACLqF,EAAIlC,UAAYA,IAEfC,IAAS9C,EAAAA,GAAAA,MACN8C,IAAS9C,EAAAA,GAAAA,IAAW+E,EAAIhB,QACtBjB,GAAQA,IAAS9C,EAAAA,GAAAA,UAAiB+E,EAAIhB,aA0CbiB,CAASrB,EAAQC,EAAOa,MAC1E,GAAwBD,EAAAA,EAAAA,UAASG,GAA1BM,EAAP,KAAaC,EAAb,KAEA,OACI,gBAAC,KAAD,CAAQC,QAAQ,GACZ,gBAAC,KAAD,CAAWC,MAAM,UAAS,gEAA1B,eACA,gBAAC,KAAD,CACIC,GAAE,YAAcJ,EAChBK,UAAWC,EAAAA,GAAAA,GACXC,YAAa,kBAAMN,EAAQP,OAH/B,kBAKA,gBAAC,KAAD,CAAMW,UAAWC,EAAAA,GAAAA,IACZ3B,EAAMvD,KAAI,WAA0BX,GAA1B,IAAE0D,EAAF,EAAEA,QAASa,EAAX,EAAWA,QAASC,EAApB,EAAoBA,IAApB,OACP,gBAAC,KAAD,CACIuB,IAAK/F,EACL+E,QAASA,EAAQ/E,GACjBgG,SAAU,SAACC,GACPlB,EAAQ/E,GAAKiG,EACbjB,GAAW,OAAID,IACfS,EAAQP,OAGZ,gBAAC,KAAD,CAAMiB,UAAU,MAAMR,MAAM,UACxB,4BAAOhC,GACNa,EACG,wBAAMqB,UAAWC,EAAAA,GAAAA,IAAjB,QACA,KACHrB,EAAM,EACH,wBAAMoB,UAAWC,EAAAA,GAAAA,IAAjB,MAAoCrB,EAApC,KACA,WAKpB,gBAAC,KAAD,6EACA,gBAAC,KAAD,6BAAgC,gBAAC,KAAD,CAAMmB,GAAG,WAAT,eAAhC,KACA,gBAAC,KAAD,wCACqC1B,EAAOtE,OAD5C,oDAE4B,gBAAC,KAAD,CAAMgG,GAAG,WAAT,QAF5B,KAIA,gBAAC,KAAD,kCAEc,gBAAC,KAAD,CAAMA,GAAG,wCAAT,eAFd","sources":["webpack://gw2-bingo/./src/convert/v1.ts","webpack://gw2-bingo/./src/hooks/fields.ts","webpack://gw2-bingo/./src/hooks/fractals.ts","webpack://gw2-bingo/./src/data/index.ts","webpack://gw2-bingo/./src/hooks/dailies.ts","webpack://gw2-bingo/./src/pages/index.tsx"],"sourcesContent":["/** Helper for conversion. */\nconst converter = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n\n/** Encodes IDs as a 12 character base64 string. */\nexport const encode = (ids: number[]): string => {\n    // check ids length\n    if (ids.length !== 9) {\n        return \"\";\n    }\n\n    // convert into 4x 2-bit numbers\n    const numbers: number[] = [];\n    for (const id of ids) {\n        numbers.push(id & 3);\n        numbers.push((id >> 2) & 3);\n        numbers.push((id >> 4) & 3);\n        numbers.push((id >> 6) & 3);\n    }\n\n    // group numbers to base64 code\n    let code = \"\";\n    for (let i = 0; i < numbers.length; i += 3) {\n        code += converter.charAt(numbers[i] + (numbers[i + 1] << 2) + (numbers[i + 2] << 4));\n    }\n    return code;\n};\n\n/** Decodes IDs from a 12 character base64 string. */\nexport const decode = (code: string): number[] => {\n    // check code length\n    if (code.length !== 12) {\n        return [];\n    }\n\n    // decode numbers\n    const numbers: number[] = [];\n    for (const char of code.split(\"\")) {\n        // convert it to 6-bit number\n        const code = converter.indexOf(char);\n\n        // check code\n        if (code === -1) {\n            return [];\n        }\n\n        // split into 3x 2-bit numbers\n        numbers.push(code & 3);\n        numbers.push((code >> 2) & 3);\n        numbers.push((code >> 4) & 3);\n    }\n\n    // group numbers to bytes\n    const ids: number[] = [];\n    for (let i = 0; i < numbers.length; i += 4) {\n        ids.push(numbers[i] + (numbers[i + 1] << 2) + (numbers[i + 2] << 4) + (numbers [i + 3] << 6));\n    }\n    return ids;\n};\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {Fractal} from \"./fractals\";\nimport {Item} from \"../components/elements\";\n\nexport const enum Mode {\n    Normal = \"Normal\",\n    CM = \"CM\",\n    Both = \"Both\"\n}\n\nexport interface Field {\n    fractal: string;\n    mode?: Mode;\n    encounter?: string;\n    event: string;\n}\n\ninterface FieldData {\n    allFieldsJson: {\n        totalCount: number;\n        nodes: Field[];\n    }\n}\n\nconst useFieldData = () => useStaticQuery<FieldData>(graphql`\n    query {\n        allFieldsJson {\n            totalCount\n            nodes {\n                fractal\n                mode\n                encounter\n                event\n            }\n        }\n    }\n`);\n\nexport const useFields = (): Field[] => useFieldData().allFieldsJson.nodes;\n\nexport const useFieldCount = (): number => useFieldData().allFieldsJson.totalCount;\n\n/** Generates a set of random field IDs */\nexport const randomFields = (all: Field[], whitelist: Field[]): number[] => {\n    if (whitelist.length < 9) {\n        return [];\n    } else {\n        const result: number[] = [];\n        while (result.length < 9) {\n            const generated = whitelist[Math.floor(Math.random() * whitelist.length)];\n            const id = all.indexOf(generated);\n            if (!result.includes(id)) {\n                result.push(id);\n            }\n        }\n        return result;\n    }\n};\n\n/** Converts field data to an item. */\nexport const toItem = (fractals: Fractal[], {fractal, mode, encounter, event}: Field): Item => {\n    const found = fractals.find(({name}) => name === fractal);\n    const display = mode === Mode.CM\n        ? `${found ? found.displayCM ?? found.name : fractal} CM`\n        : found ? found.display ?? found.name : fractal;\n    return {\n        title: encounter ? `${display} - ${encounter}` : display,\n        content: event\n    };\n};\n","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport interface Fractal {\n    id: number;\n    name: string;\n    display?: string;\n    hasCM: boolean;\n    displayCM?: string;\n    scales: number[];\n}\n\ninterface FractalData {\n    allFractalsJson: {\n        nodes: (Omit<Fractal, \"id\"> & {jsonId: number})[];\n    }\n}\n\nconst useFractalData = () => useStaticQuery<FractalData>(graphql`\n    query {\n        allFractalsJson {\n            nodes {\n                jsonId\n                name\n                display\n                hasCM\n                displayCM\n                scales\n            }\n        }\n    }\n`);\n\nexport const useFractalsWithLobby = (): Fractal[] => useFractalData().allFractalsJson.nodes.map(({jsonId, ...rest}) => ({id: jsonId, ...rest}));\n\nexport const useFractals = (): Fractal[] => useFractalsWithLobby().slice(1);\n\nexport const scaleToTier = (scale: number): number => {\n    if (scale <= 0 || scale >= 100) {\n        return 0;\n    } else if (scale <= 25) {\n        return 1;\n    } else if (scale <= 50) {\n        return 2;\n    } else if (scale <= 75) {\n        return 3;\n    } else {\n        return 4;\n    }\n};\n","/** Date when last updated. */\nexport const DATE: number = Date.UTC(2022, 1, 28); // end of dragons release\n\n/** Offset in the daily rotation. */\nexport const OFFSET = 14;\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {DATE, OFFSET} from \"../data\";\n\ninterface DailyEntry {\n    _0: number;\n    _1: number;\n    _2: number;\n}\n\ninterface DailyData {\n    allDailiesJson: {\n        nodes: DailyEntry[];\n    }\n    allRecsJson: {\n        nodes: DailyEntry[];\n    }\n}\n\nconst useDailyData = () => useStaticQuery<DailyData>(graphql`\n    query {\n        allDailiesJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n        allRecsJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n    }\n`);\n\nexport const useDailies = (): number[][] => useDailyData().allDailiesJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\nexport const useRecs = (): number[][] => useDailyData().allRecsJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\n/** One day in milliseconds. */\nconst DAY = 24 * 60 * 60 * 1000;\n\n/** Returns the index in the daily rotation for a given date. */\nconst indexFor = (date: Date) => {\n    // calculate time passed since last update\n    const passed = date.getTime() - DATE;\n\n    // index is days passed\n    return (Math.floor(passed / DAY) + OFFSET) % 15;\n};\n\n/** Returns the fractal daily ids for a given date. */\nexport const useDailiesFor = (date: Date): number[] => useDailies()[indexFor(date)];\n\n/** Returns the fractal rec scales for a given date. */\nexport const useRecsFor = (date: Date): number[] => useRecs()[indexFor(date)];\n\n/** Returns todays fractal daily ids. */\nexport const useTodaysDailies = (): number[] => useDailiesFor(new Date());\n\n/** Returns todays fractal rec scales. */\nexport const useTodaysRecs = (): number[] => useRecsFor(new Date());\n","import React, {useState, useMemo} from \"react\";\nimport {Layout, Flex, Grid, spacing} from \"../components/layout\";\nimport {Link, Paragraph, Checkbox, LinkButton} from \"../components/elements\";\nimport {encode} from \"../convert/v1\";\nimport {useFractals, useTodaysDailies, useTodaysRecs, scaleToTier, useFields, randomFields, Field, Mode} from \"../hooks\";\n\ninterface Box {\n    display: string;\n    fractal: string;\n    hasCM: boolean;\n    isCM: boolean;\n    isDaily: boolean;\n    rec: number;\n}\n\nconst toFields = (fields: Field[], boxes: Box[], checked: boolean[]): Field[] => {\n    const hasDailies = boxes.some(({isCM}, i) => checked[i] && !isCM);\n    const hasCMs = boxes.some(({isCM}, i) => checked[i] && isCM);\n\n    return fields.filter(({fractal, mode}) => {\n        switch (fractal) {\n            case \"All\":\n                return mode === Mode.CM ? hasCMs : true;\n            case \"Dailies\":\n                return hasDailies;\n            default:\n                return boxes.some((box, i) => (\n                    checked[i]\n                    && box.fractal === fractal\n                    && (\n                        mode === Mode.Both\n                        || mode === Mode.CM && box.isCM\n                        || (!mode || mode === Mode.Normal) && !box.isCM\n                    )\n                ));\n        }\n    });\n};\n\nconst Index = (): JSX.Element => {\n    // data\n    const fractals = useFractals();\n    const dailies = useTodaysDailies();\n    const recs = useTodaysRecs();\n    const fields = useFields();\n\n    // checkboxes\n    const boxes = useMemo<Box[]>(() => [\n        ...fractals\n            .map(({id, name, display, scales, hasCM}) => ({\n                fractal: name,\n                display: display ?? name,\n                isCM: false,\n                hasCM,\n                isDaily: dailies.includes(id),\n                rec: scaleToTier(scales.find((scale) => recs.includes(scale)) ?? 0)\n            }))\n            .sort((a, b) => a.display.localeCompare(b.display)),\n        ...fractals\n            .filter(({hasCM}) => hasCM)\n            .map(({id, name, displayCM}) => ({\n                fractal: name,\n                display: `${displayCM ?? name} CM`,\n                hasCM: true,\n                isCM: true,\n                isDaily: dailies.includes(id),\n                rec: 0\n            }))\n    ], [fractals, dailies, recs]);\n\n    // checkbox state\n    const [checked, setChecked] = useState(() => boxes.map(({hasCM, isCM, isDaily}) => isCM || (!hasCM && isDaily)));\n\n    // random field ids\n    const genRand = () => encode(randomFields(fields, toFields(fields, boxes, checked)));\n    const [rand, setRand] = useState(genRand);\n\n    return (\n        <Layout isHome={true}>\n            <Paragraph align=\"center\"><i>Such fun! It&apos;s fantastic, isn&apos;t it?</i> ~Viirastra</Paragraph>\n            <LinkButton\n                to={`/v1/card?${rand}`}\n                className={spacing.bottom20}\n                onMouseDown={() => setRand(genRand())}\n            >Generate Bingo</LinkButton>\n            <Grid className={spacing.bottom20}>\n                {boxes.map(({display, isDaily, rec}, i) => (\n                    <Checkbox\n                        key={i}\n                        checked={checked[i]}\n                        onChange={(value) => {\n                            checked[i] = value;\n                            setChecked([...checked]);\n                            setRand(genRand());\n                        }}\n                    >\n                        <Flex direction=\"row\" align=\"center\">\n                            <span>{display}</span>\n                            {isDaily ? (\n                                <code className={spacing.left5}> [D]</code>\n                            ) : null}\n                            {rec > 0 ? (\n                                <code className={spacing.left5}> [R{rec}]</code>\n                            ) : null}\n                        </Flex>\n                    </Checkbox>\n                ))}\n            </Grid>\n            <Paragraph>This page allows you to generate a bingo card for your Fractal runs.</Paragraph>\n            <Paragraph>First time here? See <Link to=\"/how-to\">How to play</Link>.</Paragraph>\n            <Paragraph>\n                Currently we feature a total of {fields.length} different bingo fields!\n                You can see all of them <Link to=\"/fields\">here</Link>.\n            </Paragraph>\n            <Paragraph>\n                Got good ideas?\n                Check the <Link to=\"https://github.com/Zerthox/gw2-bingo\">GitHub Repo</Link>.\n            </Paragraph>\n        </Layout>\n    );\n};\n\nexport default Index;\n"],"names":["converter","encode","ids","length","numbers","id","push","code","i","charAt","decode","split","char","indexOf","Mode","useFractalsWithLobby","useStaticQuery","allFractalsJson","nodes","map","jsonId","rest","useFractals","slice","scaleToTier","scale","DATE","Date","UTC","useDailyData","indexFor","date","passed","getTime","Math","floor","useDailiesFor","allDailiesJson","_0","_1","_2","useRecsFor","allRecsJson","useTodaysDailies","useTodaysRecs","useFieldData","useFields","allFieldsJson","useFieldCount","totalCount","randomFields","all","whitelist","result","generated","random","includes","toItem","fractals","fractal","mode","encounter","event","found","find","name","display","CM","displayCM","title","content","dailies","recs","fields","boxes","useMemo","scales","isCM","hasCM","isDaily","rec","sort","a","b","localeCompare","filter","useState","checked","setChecked","genRand","hasDailies","some","hasCMs","box","toFields","rand","setRand","isHome","align","to","className","spacing","onMouseDown","key","onChange","value","direction"],"sourceRoot":""}