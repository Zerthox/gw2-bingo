{"version":3,"file":"component---src-pages-how-to-tsx-3f7c3f9141687a0f68fd.js","mappings":"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","sources":["webpack://gw2-bingo/./src/components/bingo/tile.tsx","webpack://gw2-bingo/./src/components/bingo/tile.module.scss","webpack://gw2-bingo/./src/components/bingo/card.tsx","webpack://gw2-bingo/./src/components/bingo/card.module.scss","webpack://gw2-bingo/./src/components/bingo/bingo.tsx","webpack://gw2-bingo/./src/hooks/fields.ts","webpack://gw2-bingo/./src/hooks/fractals.ts","webpack://gw2-bingo/./src/data/index.ts","webpack://gw2-bingo/./src/hooks/dailies.ts","webpack://gw2-bingo/./src/pages/how-to.tsx"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport * as styles from \"./tile.module.scss\";\n\nexport interface Item {\n    title: string;\n    content: string;\n}\n\nexport interface TileProps extends Item {\n    highlight: boolean;\n    className?: string;\n    onClick?: () => void;\n}\n\nexport const Tile = ({title, content, highlight, className, onClick}: TileProps): JSX.Element => (\n    <div\n        className={classNames(styles.tile, className, {\n            [styles.clickable]: onClick instanceof Function,\n            [styles.highlight]: highlight\n        })}\n        onClick={onClick}\n    >\n        <div className={styles.title}>{title}</div>\n        <div className={styles.content}>{content}</div>\n    </div>\n);\n","// extracted by mini-css-extract-plugin\nexport var tile = \"tile-module--tile--hPsIn\";\nexport var clickable = \"tile-module--clickable--vVTmr\";\nexport var highlight = \"tile-module--highlight--bUuLy\";\nexport var title = \"tile-module--title--C+6nQ\";\nexport var content = \"tile-module--content--4oj29\";","import React, {useState, forwardRef, ForwardedRef} from \"react\";\nimport {Tile, TileProps} from \"./tile\";\nimport * as styles from \"./card.module.scss\";\n\nexport type FieldProps = Omit<TileProps, \"highlight\">;\n\nexport interface CardProps {\n    tiles: FieldProps[];\n}\n\nconst Card = ({tiles}: CardProps, ref: ForwardedRef<HTMLDivElement>): JSX.Element => {\n    const [active, setActive] = useState(Array<boolean>(9).fill(false));\n    return (\n        <div ref={ref} className={styles.card}>\n            {tiles.map((props, i) => (\n                <Tile\n                    key={i}\n                    {...props}\n                    highlight={active[i]}\n                    onClick={() => {\n                        active[i] = !active[i];\n                        setActive([...active]);\n                    }}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default forwardRef(Card);\n","// extracted by mini-css-extract-plugin\nexport var card = \"card-module--card--tTgUo\";","import React, {forwardRef, ForwardedRef} from \"react\";\nimport {useFractals, useFields, toItem} from \"../../hooks\";\nimport Card from \"./card\";\n\nexport interface BingoProps {\n    ids: number[];\n}\n\nconst Bingo = ({ids}: BingoProps, ref: ForwardedRef<HTMLDivElement>): JSX.Element => {\n    const fractals = useFractals();\n    const fields = useFields();\n    return <Card ref={ref} tiles={ids.map((id) => toItem(fractals, fields[id]))}/>;\n};\n\nexport default forwardRef(Bingo);\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {Fractal} from \"./fractals\";\nimport {Item} from \"../components/elements\";\n\nexport const enum Mode {\n    Normal = \"Normal\",\n    CM = \"CM\",\n    Both = \"Both\"\n}\n\nexport interface Field {\n    fractal: string;\n    mode?: Mode;\n    encounter?: string;\n    event: string;\n}\n\ninterface FieldData {\n    allFieldsJson: {\n        totalCount: number;\n        nodes: Field[];\n    }\n}\n\nconst useFieldData = () => useStaticQuery<FieldData>(graphql`\n    query {\n        allFieldsJson {\n            totalCount\n            nodes {\n                fractal\n                mode\n                encounter\n                event\n            }\n        }\n    }\n`);\n\nexport const useFields = (): Field[] => useFieldData().allFieldsJson.nodes;\n\nexport const useFieldCount = (): number => useFieldData().allFieldsJson.totalCount;\n\n/** Generates a set of random field IDs */\nexport const randomFields = (all: Field[], whitelist: Field[]): number[] => {\n    if (whitelist.length < 9) {\n        return [];\n    } else {\n        const result: number[] = [];\n        while (result.length < 9) {\n            const generated = whitelist[Math.floor(Math.random() * whitelist.length)];\n            const id = all.indexOf(generated);\n            if (!result.includes(id)) {\n                result.push(id);\n            }\n        }\n        return result;\n    }\n};\n\n/** Converts field data to an item. */\nexport const toItem = (fractals: Fractal[], {fractal, mode, encounter, event}: Field): Item => {\n    const found = fractals.find(({name}) => name === fractal);\n    const display = mode === Mode.CM\n        ? `${found ? found.displayCM ?? found.name : fractal} CM`\n        : found ? found.display ?? found.name : fractal;\n    return {\n        title: encounter ? `${display} - ${encounter}` : display,\n        content: event\n    };\n};\n","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport interface Fractal {\n    id: number;\n    name: string;\n    display?: string;\n    hasCM: boolean;\n    displayCM?: string;\n    scales: number[];\n}\n\ninterface FractalData {\n    allFractalsJson: {\n        nodes: (Omit<Fractal, \"id\"> & {jsonId: number})[];\n    }\n}\n\nconst useFractalData = () => useStaticQuery<FractalData>(graphql`\n    query {\n        allFractalsJson {\n            nodes {\n                jsonId\n                name\n                display\n                hasCM\n                displayCM\n                scales\n            }\n        }\n    }\n`);\n\nexport const useFractalsWithLobby = (): Fractal[] => useFractalData().allFractalsJson.nodes.map(({jsonId, ...rest}) => ({id: jsonId, ...rest}));\n\nexport const useFractals = (): Fractal[] => useFractalsWithLobby().slice(1);\n\nexport const scaleToTier = (scale: number): number => {\n    if (scale <= 0 || scale >= 100) {\n        return 0;\n    } else if (scale <= 25) {\n        return 1;\n    } else if (scale <= 50) {\n        return 2;\n    } else if (scale <= 75) {\n        return 3;\n    } else {\n        return 4;\n    }\n};\n","/** Date when last updated. */\nexport const DATE: number = Date.UTC(2022, 1, 28); // end of dragons release\n\n/** Offset in the daily rotation. */\nexport const OFFSET = 14;\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {DATE, OFFSET} from \"../data\";\n\ninterface DailyEntry {\n    _0: number;\n    _1: number;\n    _2: number;\n}\n\ninterface DailyData {\n    allDailiesJson: {\n        nodes: DailyEntry[];\n    }\n    allRecsJson: {\n        nodes: DailyEntry[];\n    }\n}\n\nconst useDailyData = () => useStaticQuery<DailyData>(graphql`\n    query {\n        allDailiesJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n        allRecsJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n    }\n`);\n\nexport const useDailies = (): number[][] => useDailyData().allDailiesJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\nexport const useRecs = (): number[][] => useDailyData().allRecsJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\n/** One day in milliseconds. */\nconst DAY = 24 * 60 * 60 * 1000;\n\n/** Returns the index in the daily rotation for a given date. */\nconst indexFor = (date: Date) => {\n    // calculate time passed since last update\n    const passed = date.getTime() - DATE;\n\n    // index is days passed\n    return (Math.floor(passed / DAY) + OFFSET) % 15;\n};\n\n/** Returns the fractal daily ids for a given date. */\nexport const useDailiesFor = (date: Date): number[] => useDailies()[indexFor(date)];\n\n/** Returns the fractal rec scales for a given date. */\nexport const useRecsFor = (date: Date): number[] => useRecs()[indexFor(date)];\n\n/** Returns todays fractal daily ids. */\nexport const useTodaysDailies = (): number[] => useDailiesFor(new Date());\n\n/** Returns todays fractal rec scales. */\nexport const useTodaysRecs = (): number[] => useRecsFor(new Date());\n","import React from \"react\";\nimport {Layout} from \"../components/layout\";\nimport {Link, Paragraph} from \"../components/elements\";\nimport {Bingo} from \"../components/bingo\";\n\nconst HowTo = (): JSX.Element => (\n    <Layout title=\"How to play\">\n        <Paragraph>\n            A bingo card has 9 fields ordered in 3 rows and 3 columns.\n            Each fields describes an event which may or may not happen during a Fractal run.\n        </Paragraph>\n        <Paragraph>\n            After you have finished the run, mark the fields that apply.\n            You win by getting 3 fields in a row or a column or diagonal.\n        </Paragraph>\n        <Paragraph>\n            We usually generate our bingo cards after the run and put 10 <Link to=\"https://wiki.guildwars2.com/wiki/Fractal_Encryption\">Fractal Encryptions</Link> from each player in the pot.\n            Then check who has bingo and split the pot between the winners.\n            If there are no winners, everyone gets their boxes back.\n        </Paragraph>\n        <Paragraph>\n            But of course you can make up your own rules!\n            If you are up for mayhem, you can even generate the cards before the run.\n        </Paragraph>\n        <Paragraph>A bingo card looks like this:</Paragraph>\n        <Bingo ids={[46, 72, 24, 10, 51, 0, 62, 36, 40]}/>\n    </Layout>\n);\n\nexport default HowTo;\n"],"names":["Tile","title","content","highlight","className","onClick","classNames","Function","Card","ref","tiles","useState","Array","fill","active","setActive","map","props","i","key","forwardRef","Bingo","ids","fractals","useFractals","fields","useFields","id","toItem","Mode","useFractalsWithLobby","useStaticQuery","allFractalsJson","nodes","jsonId","rest","slice","scaleToTier","scale","DATE","Date","UTC","useDailyData","indexFor","date","passed","getTime","Math","floor","useDailiesFor","allDailiesJson","_0","_1","_2","useRecsFor","allRecsJson","useTodaysDailies","useTodaysRecs","useFieldData","allFieldsJson","useFieldCount","totalCount","randomFields","all","whitelist","length","result","generated","random","indexOf","includes","push","fractal","mode","encounter","event","found","find","name","display","CM","displayCM","to"],"sourceRoot":""}