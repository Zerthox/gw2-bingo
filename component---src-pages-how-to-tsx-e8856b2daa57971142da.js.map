{"version":3,"file":"component---src-pages-how-to-tsx-e8856b2daa57971142da.js","mappings":"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","sources":["webpack://gw2-bingo/./src/components/bingo/tile.module.scss","webpack://gw2-bingo/./src/components/bingo/tile.tsx","webpack://gw2-bingo/./src/components/bingo/card.tsx","webpack://gw2-bingo/./src/components/bingo/card.module.scss","webpack://gw2-bingo/./src/components/bingo/bingo.tsx","webpack://gw2-bingo/./src/hooks/fractals.ts","webpack://gw2-bingo/./src/data/index.ts","webpack://gw2-bingo/./src/hooks/dailies.ts","webpack://gw2-bingo/./src/hooks/fields.ts","webpack://gw2-bingo/./src/pages/how-to.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var clickable = \"tile-module--clickable--bd54e\";\nexport var content = \"tile-module--content--e288f\";\nexport var highlight = \"tile-module--highlight--6d4b8\";\nexport var tile = \"tile-module--tile--84fb0\";\nexport var title = \"tile-module--title--0beea\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport * as styles from \"./tile.module.scss\";\n\nexport interface Item {\n    title: string;\n    content: string;\n}\n\nexport interface TileProps extends Item {\n    highlight: boolean;\n    className?: string;\n    onClick?: () => void;\n}\n\nexport const Tile = ({title, content, highlight, className, onClick}: TileProps): JSX.Element => (\n    <div\n        className={classNames(styles.tile, className, {\n            [styles.clickable]: onClick instanceof Function,\n            [styles.highlight]: highlight\n        })}\n        onClick={onClick}\n    >\n        <div className={styles.title}>{title}</div>\n        <div className={styles.content}>{content}</div>\n    </div>\n);\n","import React, {useState, forwardRef, ForwardedRef} from \"react\";\nimport {Tile, TileProps} from \"./tile\";\nimport * as styles from \"./card.module.scss\";\n\nexport type FieldProps = Omit<TileProps, \"highlight\">;\n\nexport interface CardProps {\n    tiles: FieldProps[];\n}\n\nconst Card = ({tiles}: CardProps, ref: ForwardedRef<HTMLDivElement>): JSX.Element => {\n    const [active, setActive] = useState(Array<boolean>(9).fill(false));\n    return (\n        <div ref={ref} className={styles.card}>\n            {tiles.map((props, i) => (\n                <Tile\n                    key={i}\n                    {...props}\n                    highlight={active[i]}\n                    onClick={() => {\n                        active[i] = !active[i];\n                        setActive([...active]);\n                    }}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default forwardRef(Card);\n","// extracted by mini-css-extract-plugin\nexport var card = \"card-module--card--b5381\";","import React, {forwardRef, ForwardedRef} from \"react\";\nimport {useFractals, useFields, toItem} from \"../../hooks\";\nimport Card from \"./card\";\n\nexport interface BingoProps {\n    ids: number[];\n}\n\nconst Bingo = ({ids}: BingoProps, ref: ForwardedRef<HTMLDivElement>): JSX.Element => {\n    const fractals = useFractals();\n    const fields = useFields();\n    return <Card ref={ref} tiles={ids.map((id) => toItem(fractals, fields[id]))}/>;\n};\n\nexport default forwardRef(Bingo);\n","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport interface Fractal {\n    id: number;\n    name: string;\n    display?: string;\n    hasCM: boolean;\n    displayCM?: string;\n    scales: number[];\n}\n\ninterface FractalData {\n    allFractalsJson: {\n        nodes: (Omit<Fractal, \"id\"> & {jsonId: number})[];\n    }\n}\n\nconst useFractalData = () => useStaticQuery<FractalData>(graphql`\n    query {\n        allFractalsJson {\n            nodes {\n                jsonId\n                name\n                display\n                hasCM\n                displayCM\n                scales\n            }\n        }\n    }\n`);\n\nexport const useFractalsWithLobby = (): Fractal[] => useFractalData().allFractalsJson.nodes.map(({jsonId, ...rest}) => ({id: jsonId, ...rest}));\n\nexport const useFractals = (): Fractal[] => useFractalsWithLobby().slice(1);\n\nexport const scaleToTier = (scale: number): number => {\n    if (scale <= 0 || scale >= 100) {\n        return 0;\n    } else if (scale <= 25) {\n        return 1;\n    } else if (scale <= 50) {\n        return 2;\n    } else if (scale <= 75) {\n        return 3;\n    } else {\n        return 4;\n    }\n};\n","/** Date when last updated. */\nexport const DATE: number = Date.UTC(2022, 1, 28); // end of dragons release\n\n/** Offset in the daily rotation. */\nexport const OFFSET = 3;\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {DATE, OFFSET} from \"../data\";\n\ninterface DailyEntry {\n    _0: number;\n    _1: number;\n    _2: number;\n}\n\ninterface DailyData {\n    allDailiesJson: {\n        nodes: DailyEntry[];\n    }\n    allRecsJson: {\n        nodes: DailyEntry[];\n    }\n}\n\nconst useDailyData = () => useStaticQuery<DailyData>(graphql`\n    query {\n        allDailiesJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n        allRecsJson {\n            nodes {\n                _0\n                _1\n                _2\n            }\n        }\n    }\n`);\n\nexport const useDailies = (): number[][] => useDailyData().allDailiesJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\nexport const useRecs = (): number[][] => useDailyData().allRecsJson.nodes.map(({_0, _1, _2}) => [_0, _1, _2]);\n\n/** One day in milliseconds. */\nconst DAY = 24 * 60 * 60 * 1000;\n\n/** Returns the index in the daily rotation for a given date. */\nconst indexFor = (date: Date) => {\n    // calculate time passed since last update\n    const passed = date.getTime() - DATE;\n\n    // index is days passed\n    return (Math.floor(passed / DAY) + OFFSET) % 15;\n};\n\n/** Returns the fractal daily ids for a given date. */\nexport const useDailiesFor = (date: Date): number[] => useDailies()[indexFor(date)];\n\n/** Returns the fractal rec scales for a given date. */\nexport const useRecsFor = (date: Date): number[] => useRecs()[indexFor(date)];\n\n/** Returns todays fractal daily ids. */\nexport const useTodaysDailies = (): number[] => useDailiesFor(new Date());\n\n/** Returns todays fractal rec scales. */\nexport const useTodaysRecs = (): number[] => useRecsFor(new Date());\n","import {useStaticQuery, graphql} from \"gatsby\";\nimport {Fractal} from \"./fractals\";\nimport {Item} from \"../components/elements\";\n\nexport const enum Mode {\n    Normal = \"Normal\",\n    CM = \"CM\",\n    Both = \"Both\"\n}\n\nexport interface Field {\n    fractal: string;\n    mode?: Mode;\n    encounter?: string;\n    event: string;\n}\n\ninterface FieldData {\n    allFieldsJson: {\n        totalCount: number;\n        nodes: Field[];\n    }\n}\n\nconst useFieldData = () => useStaticQuery<FieldData>(graphql`\n    query {\n        allFieldsJson {\n            totalCount\n            nodes {\n                fractal\n                mode\n                encounter\n                event\n            }\n        }\n    }\n`);\n\nexport const useFields = (): Field[] => useFieldData().allFieldsJson.nodes;\n\nexport const useFieldCount = (): number => useFieldData().allFieldsJson.totalCount;\n\n/** Generates a set of random field IDs */\nexport const randomFields = (all: Field[], whitelist: Field[]): number[] => {\n    if (whitelist.length < 9) {\n        return [];\n    } else {\n        const result: number[] = [];\n        while (result.length < 9) {\n            const generated = whitelist[Math.floor(Math.random() * whitelist.length)];\n            const id = all.indexOf(generated);\n            if (!result.includes(id)) {\n                result.push(id);\n            }\n        }\n        return result;\n    }\n};\n\n/** Converts field data to an item. */\nexport const toItem = (fractals: Fractal[], {fractal, mode, encounter, event}: Field): Item => {\n    const found = fractals.find(({name}) => name === fractal);\n    const display = mode === Mode.CM\n        ? `${found ? found.displayCM ?? found.name : fractal} CM`\n        : found ? found.display ?? found.name : fractal;\n    return {\n        title: encounter ? `${display} - ${encounter}` : display,\n        content: event\n    };\n};\n","import React from \"react\";\nimport {Layout} from \"../components/layout\";\nimport {Link, Paragraph} from \"../components/elements\";\nimport {Bingo} from \"../components/bingo\";\n\nconst HowTo = (): JSX.Element => (\n    <Layout title=\"How to play\">\n        <Paragraph>\n            A bingo card has 9 fields ordered in 3 rows and 3 columns.\n            Each fields describes an event which may or may not happen during a Fractal run.\n        </Paragraph>\n        <Paragraph>\n            After you have finished the run, mark the fields that apply.\n            You win by getting 3 fields in a row or a column or diagonal.\n        </Paragraph>\n        <Paragraph>\n            We usually generate our bingo cards after the run and put 10 <Link to=\"https://wiki.guildwars2.com/wiki/Fractal_Encryption\">Fractal Encryptions</Link> from each player in the pot.\n            Then check who has bingo and split the pot between the winners.\n            If there are no winners, everyone gets their boxes back.\n        </Paragraph>\n        <Paragraph>\n            But of course you can make up your own rules!\n            If you are up for mayhem, you can even generate the cards before the run.\n        </Paragraph>\n        <Paragraph>A bingo card looks like this:</Paragraph>\n        <Bingo ids={[46, 72, 24, 10, 51, 0, 62, 36, 40]}/>\n    </Layout>\n);\n\nexport default HowTo;\n"],"names":["clickable","Tile","_ref","title","content","highlight","className","onClick","React","classNames","styles","Function","Card","ref","tiles","active","setActive","useState","Array","fill","map","props","i","Object","assign","key","_toConsumableArray","forwardRef","Bingo","ids","fractals","useFractals","fields","useFields","id","toItem","useFractalsWithLobby","useStaticQuery","allFractalsJson","nodes","jsonId","rest","slice","scaleToTier","scale","DATE","Date","UTC","useDailyData","indexFor","date","passed","getTime","Math","floor","useDailiesFor","allDailiesJson","_0","_1","_2","useRecsFor","allRecsJson","_ref2","useTodaysDailies","useTodaysRecs","Mode","useFieldData","allFieldsJson","useFieldCount","totalCount","randomFields","all","whitelist","length","result","generated","random","indexOf","includes","push","_found$displayCM","_found$display","fractal","mode","encounter","event","found","find","name","display","CM","displayCM","HowTo","Layout","Paragraph","Link","to"],"sourceRoot":""}